
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\03_Advanced\plot_06_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_03_Advanced_plot_06_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_Advanced_plot_06_fitting.py:


.. _plot_06_fitting:

=============================
Using the SpinLab Fit function
=============================

This example demonstrates how to use the SpinLab fit function on a sldata object.

.. GENERATED FROM PYTHON SOURCE LINES 13-15

The following example shows how the autophase function can be conveniently used.
To get started, first, setup the python environment:

.. GENERATED FROM PYTHON SOURCE LINES 15-19

.. code-block:: Python


    import spinlab as sl
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 20-22

Let's generate a test data set with some noise
the test data is a lorentzian distribution with some noise added

.. GENERATED FROM PYTHON SOURCE LINES 22-34

.. code-block:: Python


    pts = 1024
    x = np.r_[-50:50:1j*pts]

    np.random.seed(101)

    values = sl.math.lineshape.lorentzian(x, 0, 0.5, 1.5)
    values += np.random.randn(pts)*0.05

    data = sl.SpinData(values, ['f2'], [x])









.. GENERATED FROM PYTHON SOURCE LINES 35-37

Now we guess the initial parameters of the fit
we create a spectrum with the initial guess to compare to our test data

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: Python


    init_guess = [0, 0.5, 1.0]

    guess_values = sl.math.lineshape.lorentzian(x, *init_guess)

    guess = sl.SpinData(guess_values, ['f2'], [x])








.. GENERATED FROM PYTHON SOURCE LINES 45-47

now we perform the fit
the output is a dictionary of SpinData objects containting the "fit" and optimal parameters "popt"

.. GENERATED FROM PYTHON SOURCE LINES 47-56

.. code-block:: Python


    out = sl.fit(sl.math.lineshape.lorentzian, data, 'f2', init_guess)
    fit = out['fit']
    popt = out['popt']

    print('Optimal Fit Values')
    print(popt.values) # print optimal fitting values






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Optimal Fit Values
    [0.00447601 0.48848853 1.48903162]




.. GENERATED FROM PYTHON SOURCE LINES 57-58

Now we plot the data, initial guess and fit

.. GENERATED FROM PYTHON SOURCE LINES 58-65

.. code-block:: Python


    sl.plt.figure('data')
    sl.plot(data, label = 'data')
    sl.plot(guess, label = 'guess')
    sl.plot(fit, label = 'fit')
    sl.plt.legend()
    sl.plt.show()



.. image-sg:: /auto_examples/03_Advanced/images/sphx_glr_plot_06_fitting_001.png
   :alt: plot 06 fitting
   :srcset: /auto_examples/03_Advanced/images/sphx_glr_plot_06_fitting_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.066 seconds)


.. _sphx_glr_download_auto_examples_03_Advanced_plot_06_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_06_fitting.ipynb <plot_06_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_06_fitting.py <plot_06_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_06_fitting.zip <plot_06_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
