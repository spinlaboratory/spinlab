
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\03_Advanced\plot_03_pseudo_modulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_03_Advanced_plot_03_pseudo_modulation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_Advanced_plot_03_pseudo_modulation.py:


.. _plot_03_pseudo_modulation:

================================
Pseudo Modulation of EPR Spectra
================================

Typically, cw EPR spectra are recorded and shown as its first derivative, because the spectrum is detected using a lock-in amplifier. In contrast, a echo-detected field sweep spectrum is recorded as the absorption spectrum. To simulated the effect of the lock-in detection on an absorption spectrum to compare spectra, the data can be pseudo-modulated to calculate the derivative of the spectrum and to filter out noise. The same attention needs to be paid to the modulation amplitude as in an actual cw experiment. The spectrum can easily be overmodulated if the value of the modulation amplitude is too high.

The procedure was developed in the lab of Jim Hyde and is described here:

* Hyde, J., M. Pasenkiewicz-Gierula, A. Jesmanowicz, and W. Antholine. “Pseudo Field Modulation in EPR Spectroscopy.” Applied Magnetic Resonance 1 (1990): 483–96.

.. GENERATED FROM PYTHON SOURCE LINES 17-20

Load 1D EPR Spectrum
--------------------
For this example we will start by loading a echo-detected field sweep spectrum of a nitroxide radical. The spectrum was recorded using SpecMan4EPR using a constant magnetic field sweep. The field is recorded at each point and fitted to a 3rd order polynome to generate the field axis. Many of these steps are specific to the data set and may not required in your case.

.. GENERATED FROM PYTHON SOURCE LINES 20-38

.. code-block:: Python


    import spinlab as sl
    import numpy as np

    file_name_path = "../../data/specman/Nitroxide_Q_Band.d01"
    data = sl.load(file_name_path)

    data = sl.left_shift(data, "x0", 1)

    field = data["x1", 2].values.squeeze()
    p = np.polyfit(data.coords["x0"], field, deg=3)
    field_fit = np.polyval(p, data.coords["x0"])

    data = data["x1", 0].sum("x1") + 1j * data["x1", 1].sum("x1")
    data = sl.update_axis(
        data, start_stop=[field_fit[0], field_fit[-1]], dim=0, new_dims="B0"
    )



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "C:\Users\thorsten.maly\OneDrive - Bruker-Physik GmbH\Documents\Repositories\spinlab\examples\03_Advanced\plot_03_pseudo_modulation.py", line 27, in <module>
        data = sl.left_shift(data, "x0", 1)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "C:\Users\thorsten.maly\OneDrive - Bruker-Physik GmbH\Documents\Repositories\spinlab\spinlab\processing\helpers.py", line 470, in left_shift
        out = out[dim, shift_points:]
              ~~~^^^^^^^^^^^^^^^^^^^^
      File "C:\Users\thorsten.maly\OneDrive - Bruker-Physik GmbH\Documents\Repositories\spinlab\spinlab\core\base.py", line 278, in __getitem__
        raise ValueError("dim not in dims")
    ValueError: dim not in dims




.. GENERATED FROM PYTHON SOURCE LINES 39-40

The imported EPR spectrum is shown in the figure below. It is an echo-detected field-sweep EPR spectrum of a nitroxide bi-radical, recorded at Q-Band frequencies.

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python


    sl.plt.figure()
    sl.fancy_plot(data)
    sl.plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 46-47

To calculated the pseudo-modulated spectrum of the absorption spectrum use the SpinLab function ``pseudo_modulation``.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: Python


    data_mod = sl.pseudo_modulation(data, modulation_amplitude=0.001)


.. GENERATED FROM PYTHON SOURCE LINES 51-52

The field axis of this example spectrum is given in (T). Therefore, the unit for the modulation_amplitude also needs to be given in (T). In the above example, the pseudo-modulation spectrum is calculated using a modulation amplitude of 1 mT (10 G).

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: Python


    sl.plt.figure()
    sl.fancy_plot(data_mod)
    sl.plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 58-59

Just like in a real cw experiment, the spectrum will show too broad lines, if the modulation amplitude is too large. The spectrum will be overmodulated. Below, the effect is shown for a modulation amplitude of 5 mT (50 G).

.. GENERATED FROM PYTHON SOURCE LINES 59-65

.. code-block:: Python


    data_mod = sl.pseudo_modulation(data, modulation_amplitude=0.005)

    sl.plt.figure()
    sl.fancy_plot(data_mod)
    sl.plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.048 seconds)


.. _sphx_glr_download_auto_examples_03_Advanced_plot_03_pseudo_modulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_03_pseudo_modulation.ipynb <plot_03_pseudo_modulation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_03_pseudo_modulation.py <plot_03_pseudo_modulation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_03_pseudo_modulation.zip <plot_03_pseudo_modulation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
